/*
 * GDevelop Core
 * Copyright 2008-2014 Florian Rival (Florian.Rival@gmail.com). All rights reserved.
 * This project is released under the MIT License.
 */

/*
 * The rest of the API exposed using embind.
 * See Embind.cpp for more information
 */
#if defined(EMSCRIPTEN)
#include <string>
#include <emscripten/bind.h>
#include "GDCore/PlatformDefinition/Platform.h"
#include "GDCore/PlatformDefinition/Layout.h"
#include "GDCore/PlatformDefinition/Project.h"
#include "GDCore/PlatformDefinition/PlatformExtension.h"
#include "GDCore/IDE/ArbitraryResourceWorker.h"
#include "GDCore/IDE/AbstractFileSystem.h"
#include "GDCore/IDE/ProjectResourcesAdder.h"
#include "GDCore/IDE/EventsRefactorer.h"
#include "GDCore/IDE/ArbitraryEventsWorker.h"
#include "GDCore/IDE/EventsParametersLister.h"
#include "GDCore/IDE/MetadataProvider.h"
#include "GDCore/IDE/InstructionSentenceFormatter.h"
#include "GDCore/Events/Instruction.h"
#include "GDCore/Events/Event.h"
#include "GDCore/Events/Builtin/StandardEvent.h"
#include "GDCore/Events/Builtin/CommentEvent.h"
#include "GDCore/Events/Builtin/ForEachEvent.h"
#include "GDCore/Events/Builtin/WhileEvent.h"
#include "GDCore/Events/Builtin/GroupEvent.h"
#include "GDCore/Events/Builtin/RepeatEvent.h"
#include "GDCore/Events/EventsCodeGenerator.h"
#include "GDCore/Events/InstructionMetadata.h"
#include "GDCore/Events/ExpressionMetadata.h"
#include "GDCore/Events/ObjectMetadata.h"
#include "GDCore/Events/AutomatismMetadata.h"
#include "GDCore/Events/EventsList.h"
#include "GDCore/Serialization/Serializer.h"

using namespace emscripten;
using namespace gd;

EMSCRIPTEN_BINDINGS(gd_PlatformExtension) {
    class_<std::vector<std::shared_ptr<PlatformExtension> > >("VectorPlatformExtension")
        .function("size", &VectorPlatformExtension_Size)
        .function("get", &VectorPlatformExtension_Get, allow_raw_pointers())
        ;
}


    function("asStandardEvent", &AsStandardEvent, allow_raw_pointers());
    function("asCommentEvent", &AsCommentEvent, allow_raw_pointers());
    function("asForEachEvent", &AsForEachEvent, allow_raw_pointers());
    function("asWhileEvent", &AsWhileEvent, allow_raw_pointers());
    function("asRepeatEvent", &AsRepeatEvent, allow_raw_pointers());
}



struct ArbitraryResourceWorkerWrapper : public wrapper<ArbitraryResourceWorker> {
    EMSCRIPTEN_WRAPPER(ArbitraryResourceWorkerWrapper);
    virtual void ExposeImage(std::string & imageName) {
        imageName = call<std::string>("exposeImage", imageName);
    }
    virtual void ExposeShader(std::string & shaderName) {
        shaderName = call<std::string>("exposeShader", shaderName);
    }
    virtual void ExposeFile(std::string & resourceFileName) {
        resourceFileName = call<std::string>("exposeFile", resourceFileName);
    }
};

EMSCRIPTEN_BINDINGS(gd_ArbitraryResourceWorker) {
    class_<ArbitraryResourceWorker>("ArbitraryResourceWorker")
        .allow_subclass<ArbitraryResourceWorkerWrapper>("ArbitraryResourceWorkerWrapper")
        ;
}
#endif
